#include "shell.h"

ssize_t mwasi_input_buf(info_t *lee_info, char **lee_buf, size_t *mwasi_len)
{
	ssize_t lee_r = 0;
	size_t mwasi_len_p = 0;

	if (!*mwasi_len)
	{
		free(*lee_buf);
		*lee_buf = NULL;
		signal(SIGINT, sigintHandler);
#if USE_GETLINE
		lee_r = getline(lee_buf, &mwasi_len_p, stdin);
#else
		lee_r = _getline(lee_info, lee_buf, &mwasi_len_p);
#endif
		if (lee_r > 0)
		{
			if ((*lee_buf)[lee_r - 1] == '\n')
			{
				(*lee_buf)[lee_r - 1] = '\0';
				lee_r--;
			}
			lee_info->linecount_flag = 1;
			remove_comments(*lee_buf);
			build_history_list(lee_info, *lee_buf, lee_info->histcount++);
			{
				*mwasi_len = lee_r;
				lee_info->cmd_buf = lee_buf;
			}
		}
	}
	return (lee_r);
}

ssize_t mwasi_get_input(info_t *lee_info)
{
	static char *lee_buf;
	static size_t mwasi_i, mwasi_j, mwasi_len;
	ssize_t lee_r = 0;
	char **lee_buf_p = &(lee_info->arg), *mwasi_p;

	_putchar(BUF_FLUSH);
	lee_r = mwasi_input_buf(lee_info, &lee_buf, &mwasi_len);
	if (lee_r == -1)
		return (-1);
	if (mwasi_len)
	{
		mwasi_j = mwasi_i;
		mwasi_p = lee_buf + mwasi_i;

		check_chain(lee_info, lee_buf, &mwasi_j, mwasi_i, mwasi_len);
		while (mwasi_j < mwasi_len)
		{
			if (is_chain(lee_info, lee_buf, &mwasi_j))
				break;
			mwasi_j++;
		}

		mwasi_i = mwasi_j + 1;
		if (mwasi_i >= mwasi_len)
		{
			mwasi_i = mwasi_len = 0;
			lee_info->cmd_buf_type = CMD_NORM;
		}

		*lee_buf_p = mwasi_p;
		return (_strlen(mwasi_p));
	}

	*lee_buf_p = lee_buf;
	return (lee_r);
}

ssize_t mwasi_read_buf(info_t *lee_info, char *lee_buf, size_t *mwasi_i)
{
	ssize_t lee_r = 0;

	if (*mwasi_i)
		return (0);
	lee_r = read(lee_info->readfd, lee_buf, READ_BUF_SIZE);
	if (lee_r >= 0)
		*mwasi_i = lee_r;
	return (lee_r);
}

int mwasi_getline(info_t *lee_info, char **lee_ptr, size_t *mwasi_length)
{
	static char lee_buf[READ_BUF_SIZE];
	static size_t mwasi_i, mwasi_len;
	size_t mwasi_k;
	ssize_t lee_r = 0, mwasi_s = 0;
	char *mwasi_p = NULL, *mwasi_new_p = NULL, *lee_c;

	mwasi_p = *lee_ptr;
	if (mwasi_p && mwasi_length)
		mwasi_s = *mwasi_length;
	if (mwasi_i == mwasi_len)
		mwasi_i = mwasi_len = 0;

	lee_r = mwasi_read_buf(lee_info, lee_buf, &mwasi_len);
	if (lee_r == -1 || (lee_r == 0 && mwasi_len == 0))
		return (-1);

	lee_c = _strchr(lee_buf + mwasi_i, '\n');
	mwasi_k = lee_c ? 1 + (unsigned int)(lee_c - lee_buf) : mwasi_len;
	mwasi_new_p = _realloc(mwasi_p, mwasi_s, mwasi_s ? mwasi_s + mwasi_k : mwasi_k + 1);
	if (!mwasi_new_p)
		return (mwasi_p ? free(mwasi_p), -1 : -1);

	if (mwasi_s)
		_strncat(mwasi_new_p, lee_buf + mwasi_i, mwasi_k - mwasi_i);
	else
		_strncpy(mwasi_new_p, lee_buf + mwasi_i, mwasi_k - mwasi_i + 1);

	mwasi_s += mwasi_k - mwasi_i;
	mwasi_i = mwasi_k;
	mwasi_p = mwasi_new_p;

	if (mwasi_length)
		*mwasi_length = mwasi_s;
	*lee_ptr = mwasi_p;
	return (mwasi_s);
}

void sigintHandler(__attribute__((unused))int sig_num)
{
	_puts("\n");
	_puts("$ ");
	_putchar(BUF_FLUSH);
}

